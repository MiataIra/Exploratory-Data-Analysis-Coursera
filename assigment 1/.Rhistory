dev.off()
rm(list = ls())
library(hms)
library(dplyr)
Sys.setlocale("LC_ALL", "English") # for English weekday
Sys.setenv("LANGUAGE"="En")
My_data<-read.table("./exdata_data_household_power_consumption/household_power_consumption.txt",
sep=";",header=TRUE,
stringsAsFactors = FALSE) #load dataset
My_data<-filter(My_data, Date=="2007-02-01" | Date=="2007-02-02")
My_data<-read.table("./exdata_data_household_power_consumption/household_power_consumption.txt",
sep=";",header=TRUE,
stringsAsFactors = FALSE) #load dataset
My_data$Date<-as.Date(My_data$Date, format='%d/%m/%Y')
My_data<-filter(My_data, Date=="2007-02-01" | Date=="2007-02-02")
My_data$Time<-as_hms(My_data$Time)
My_data$Global_active_power<-as.numeric(My_data$Global_active_power)
My_data$Global_reactive_power<-as.numeric(My_data$Global_reactive_power)
My_data$Voltage<-as.numeric(My_data$Voltage)
My_data$Global_intensity<-as.numeric(My_data$Global_intensity)
My_data$Sub_metering_1<-as.numeric(My_data$Sub_metering_1)
My_data$Sub_metering_2<-as.numeric(My_data$Sub_metering_2)
My_data<-mutate((My_data), date_time=paste(Date, Time, sep=" "))
My_data$date_time<-as.POSIXlt(My_data$date_time)
png("plot1.png", width=480, height=480)
hist(My_data$Global_active_power, xlab = "Global Active Power (kilowatts)", main="Global Active Power", col="red")
dev.off()
png("plot2.png", width=480, height=480)
plot(x=My_data$date_time, y=My_data$Global_active_power, type="n", xlab =" ", ylab = "Global Active Power (kilowatts)")
lines(x=My_data$date_time, y=My_data$Global_active_power)
dev.off()
png("plot3.png", width=480, height=480)
plot(x=My_data$date_time, y=My_data$Sub_metering_1, type="n", xlab =" ", ylab = "Energy sub metering")
lines(x=My_data$date_time, y=My_data$Sub_metering_1)
lines(x=My_data$date_time, y=My_data$Sub_metering_2, col="red")
lines(x=My_data$date_time, y=My_data$Sub_metering_3, col="blue")
legend("topright", lty=1,col=c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
plot(x=My_data$date_time, y=My_data$Global_active_power, type="n", xlab =" ", ylab = "Global Active Power (kilowatts)")
lines(x=My_data$date_time, y=My_data$Global_active_power)
plot(x=My_data$date_time, y=My_data$Voltage, type="n", xlab ="datatime", ylab = "Voltage")
lines(x=My_data$date_time, y=My_data$Voltage)
plot(x=My_data$date_time, y=My_data$Sub_metering_1, type="n", xlab =" ", ylab = "Energy sub metering")
lines(x=My_data$date_time, y=My_data$Sub_metering_1)
lines(x=My_data$date_time, y=My_data$Sub_metering_2, col="red")
lines(x=My_data$date_time, y=My_data$Sub_metering_3, col="blue")
legend("topright", lty=1,col=c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty="n")
plot(x=My_data$date_time, y=My_data$Global_reactive_power, type="n", xlab ="datetime", ylab = "Global_reactive_power")
lines(x=My_data$date_time, y=My_data$Global_reactive_power)
dev.off()
install.packages("PythonInR")
reticulate::repl_python()
from random import *
Y
from random import *
# OBS! programmet er tidskrevende. For nok bra usikkerhet kreves det 10**6 gjentakelser.
antall_simuleringer = 10**6
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
reticulate::repl_python()
from random import *
antall_simuleringer = 10**1
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6) + randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 10**2
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6) + randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 10**3
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6) + randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 10**4
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6) + randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 10**5
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6) + randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 10**5
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6) + randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 10**6
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6) + randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6)
if kast !=6:
print(i)
break
kast+= randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6)
if kast ==6:
print(i)
kast+= randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 10**5
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6)
if kast ==6:
print(i)
kast+= randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 10**6
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6)
if kast ==6:
print(i)
kast+= randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
antall_simuleringer = 5*10**6
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
for i in range (0,24):
kast = randint(1,6)
if kast ==6:
kast+= randint(1,6)
if kast == 12:
antall_med2seksere += 1
break
print(antall_med2seksere/antall_simuleringer)
a = timeit.default_timer()
randint(1,6)
print(timeit.default_timer()-a)
import timeit
a = timeit.default_timer()
randint(1,6)
print(timeit.default_timer()-a)
a = timeit.default_timer()
randint(1,6)
print(timeit.default_timer()-a)
a = timeit.default_timer()
randint(1,6)
print(timeit.default_timer()-a)
a = timeit.default_timer()
randint(1,6)
print(timeit.default_timer()-a)
a = timeit.default_timer()
randint(1,6)
print(timeit.default_timer()-a)
a = timeit.default_timer()
randint(1,6)
print(timeit.default_timer()-a)
a = timeit.default_timer()
randint(1,6)
print(timeit.default_timer()-a)
quit
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::source_python('C:/Users/iryku/Downloads/oppgave-7a-inlevering-3.py')
reticulate::repl_python()
import pandas as pd
pandas
quit
import(panfas)
import(pandas)
reticulate::repl_python()
import("pandas")
import(pandas)
quit
library(reticulate)
import("pandas")
import(pandas)
repl_python()
import pandas
quit
py_install("pandas")
reticulate::repl_python()
import pandas as pd
df=pd.DataFrame
df
df=pd.DataFrame([[0, 24]] * 3, columns=['A', 'B'])
df
df=pd.DataFrame([[0, 0]] * 24, columns=['A', 'B'])
df
df.apply(randint(1,6))
from random import *
df.apply(randint(1,6))
randint(1,6)
randint(1,6)
randint(1,6)
df.apply( randint(1,6) )
df=pd.DataFrame([[randint(1,6), randint(1,6)]] * 24, columns=['A', 'B'])
df
randint(1,6)
random.randint(1,6)
randint(1,6)
quit
py_install("numpy")
reticulate::repl_python()
import numpy as np
import(pandas)
import pandas as pd
import numpy as np
import pandas as pd
import numpy as np
from random import *
np.random.randint(1,6, size=(2,24))
np.random.randint(1,6, size=(2,24))
np.random.randint(1,6, size=(2,24))
np.random.randint(1,6, size=(2,24))
np.random.randint(1,6, size=(24,24))
np.random.randint(1,7, size=(24,24))
np.random.randint(1,7, size=(24,22))
np.random.randint(1,7, size=(24,2))
df=np.random.randint(1,7, size=(24,2))
df
pd.DataFrame(df)
df=pd.DataFrame(df)
df[1,1]
df[[1,1]]
df[[1],[1]]
df[1],[1]
df[1][1]
df[0][0]
df[0][3]
df[2]=df.apply(np.sum, axis=1)
df
df[2].max()
quit
reticulate::source_python('C:/Users/iryku/Downloads/test opp7.py')
reticulate::repl_python()
from random import *
import pandas as pd
import numpy as np
a = timeit.default_timer()
antall_simuleringer = 10**5
# Initierer en variabel som "skal" telle hvor mange forsøk ga oss to seksere
antall_med2seksere = 0
for j in range (0,antall_simuleringer):
df=np.random.randint(1,7, size=(24,2))
df=pd.DataFrame(df)
df[2]=df.apply(np.sum, axis=1)
if df[2].max()==12:
antall_med2seksere += 1
print(antall_med2seksere/antall_simuleringer)
reticulate::source_python('C:/Users/iryku/Downloads/test opp7.py')
reticulate::repl_python()
from random import *
import pandas as pd
import numpy as np
quit
reticulate::source_python('C:/Users/iryku/Downloads/test opp7.py')
reticulate::source_python('C:/Users/iryku/Downloads/test opp7.py')
reticulate::source_python('C:/Users/iryku/Downloads/test opp7.py')
reticulate::source_python('C:/Users/iryku/Downloads/test opp7.py')
library(reticulate)
py_install("numpy")
reticulate::source_python('C:/Users/iryku/Downloads/test opp7.py')
reticulate::repl_python()
import numpy as np
import numpy as np
import pandas as pd
import timeit
import numpy as np
import pandas as pd
quit
library(reticulate)
py_install("numpy")
py_install("pandas")
reticulate::repl_python()
from random import *
import timeit
import numpy as np
import pandas as pd
import numpy as np
reticulate::repl_python()
from random import *
import timeit
import numpy as np
import numpy as np
from random import *
import timeit
import numpy as np
import pandas as pd
reticulate::repl_python()
from random import *
import timeit
import numpy as np
quit
library(reticulate)
py_unnnstall("numpy")
py_install("numpy")
library(swirl)
rm(list=ls())
swirl()
0
q
q()
swirl()
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="red")
5
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
swirl()
head(dataMatrix)
myedit("addPatt.R")
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2] %*%  diag(svd1$d[1:2])  %*% t(svd1$v[,1:2]
a2 <- svd1$u[,1:2] %*%  diag(svd1$d[1:2])  %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*%  diag(svd1$d[1:10])  %*% t(svd1$v[,1:10]))
swirl()
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
dim(pm0)
head(pm0)
ANY_of_exprs('cnames','print(cnames)')
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y,]
